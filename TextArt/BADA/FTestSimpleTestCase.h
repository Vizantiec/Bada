/* $Change: 431318 $ */
//
// Copyright (c) 2011 Samsung Electronics Co., Ltd.
// All rights reserved.

// This software contains confidential and proprietary information
// of Samsung Electronics Co., Ltd.
// The user of this software agrees not to disclose, disseminate or copy such
// Confidential Information and shall use the software only in accordance with
// the terms of the license agreement the user entered into with Samsung.
//
/**
 * @file		FTestSimpleTestCase.h
 * @brief		This is the header file for the %SimpleTestCase class.
 *
 * This header file contains the declarations of the %SimpleTestCase class.
 */
#ifndef _FTEST_SIMPLE_TEST_CASE_H_
#define _FTEST_SIMPLE_TEST_CASE_H_

#include <FBaseString.h> 
#include <typeinfo>

#include "FTestTestCase.h"
#include "FTestAssertException.h"
#include "FTestTestFixtureFactory.h"

namespace Osp { namespace Test {

/**
 * @class		SimpleTestCase
 * @brief		This class implements a simple testcase.
 * @since		1.1
 *
 * The %SimpleTestCase class implements a simple testcase. A simple test case is used to create an instance of TestCase class using the TestFixture class.
 *
 * For more information on the class features, see <a href="../com.osp.documentation.help/html/dev_env/testing_using_test_namespace.htm">Testing Applications Using the Test Namespace</a>. 
 * Note that instead of this class, you can also use the <a href="group__GroupTestHelperMacro.html">helper</a> macros, such as SIMPLE_TEST()  and NEW_SIMPLE_TEST_WITH_FIXTURE().
 *
 * The following demonstrates how to use the %SimpleTestCase class.
 *
 * @code
 *
 * class TestBankAccount: public Osp::Test::TestFixture{
 *	public:
 *		void SetUpBeforeTestSuite() {}
 *		void TearDownAfterTestSuite() {}
 *		void SetUp() {pAccount = new BankAccount();}
 *		void TearDown() {delete pAccount;}
 *
 *		void TestDeposit() {
 *		     pAccount->Deposit(100);
 *		     TestAssert (pAccount->GetBalance() == 100);
 *		}
 * };
 * ...
 * TestCase* testcase = new SimpleTestCase<TestBankAccount>("TestDeposit", &TestBankAccount::TestDeposit);
 * testcase->Execute(&testResult);
 * ...
 * @endcode
 *
 * The following example demonstrates how to <a href="../com.osp.documentation.help/html/dev_env/test_macros.htm">use the helper macros</a> instead.
 *
 * @code
 * TestCase* testcase = NEW_SIMPLE_TEST_WITH_FIXTURE(TestBankAccount, TestDeposit);
 * testcase->Execute(&testResult);
 * @endcode
 *
 * Also you can use SIMPLE_TEST Macro in the block which are generated by bada %Test Case Wizard. @n
 *
 * @code
 *  class TestBankAccount: public Osp::Test::TestFixture{
 *	TESTSUITE_BEGIN(TestBankAccount)
 *	SIMPLE_TEST(TestDeposit)
 *	TESTSUITE_END()
 *    ...
 * @endcode
 * 
 */
template<class TestFixtureType>
class SimpleTestCase : public TestCase
{
public:
	/**
	 * Initializes the test case with the specified parameters including the test information.
	 *
	 * @since			1.1
	 * @param[in]	caseName	The test case name
	 * @param[in]	pTestMethod	The method pointer that contains the body of this test case
	 * @param[in]	filePath	The file's path that creates this test case
	 * @param[in]	lineNum		The line number in the file that creates this test case
	 */
	SimpleTestCase(const Osp::Base::String& caseName, void(TestFixtureType::*pTestMethod)(void), const Osp::Base::String& filePath=__FILE__, int lineNum=__LINE__)
	: TestCase(caseName, filePath, lineNum), __caseName(caseName), __pTestFixture(0x00), __pTestMethod(pTestMethod)
	{

		try {
			if (__pTestMethod == 0x00) {
				throw "no method exist";
			}
		} catch (char* str) {
			AssertException(str);
		}


		TestFixtureFactory *testFixtureFactory = TestFixtureFactory::Instance();

		__pTestFixture = (TestFixtureType*)testFixtureFactory->GetTestFixture(typeid(TestFixtureType).name());

		if (__pTestFixture == null) {
			__pTestFixture = new TestFixtureType();
			testFixtureFactory->AddTestFixture(typeid(TestFixtureType).name(), *__pTestFixture);
		}

		testFixtureFactory->AddCaseRef(typeid(TestFixtureType).name(), *this);
	}

	/** @internal
	 * This constructor initializes the case with the test fixture.
	 *
	 * @since			1.1
	 * @param[in]	caseName		The case name
	 * @param[in]	testFixture		The fixture
	 * @param[in]	testCase		The case
	 * @param[in]	filePath		The file path to the file that creates this TestCase
	 * @param[in]	lineNum		The line number in the file that creates this TestCase
	 */
	SimpleTestCase(const Osp::Base::String& caseName, TestFixtureType* testFixture , void(TestFixtureType::*pTestMethod)(void), const Osp::Base::String& filePath=__FILE__, int lineNum=__LINE__)
	: TestCase(caseName, filePath, lineNum), __caseName(caseName), __pTestFixture(testFixture), __pTestMethod(pTestMethod)
	{
		TestFixtureFactory::Instance()->AddCaseRef( typeid(TestFixtureType).name(), *this);
	}

	/**
	 * This is the destructor for this class.
	 *
	 * @since			1.1
	 */
	virtual ~SimpleTestCase(void)
	{
		TestFixtureFactory::Instance()->RemoveCaseRef( typeid(TestFixtureType).name(), *this);
	}

public:
	/** @internal
	 * Gets the TestFixture to be used in this class.
	 *
	 * @since			1.1
	 * @return		the pointer on TestFixture
	 */
	virtual TestFixture* GetTestFixture(void)
	{
		return __pTestFixture;
	}

private:
	/**
	 * Runs the test case.
	 */
	virtual void Run(void)
	{
		 (__pTestFixture->*__pTestMethod)();
	}

protected:
    /**
     *@internal
     * This variable is for internal use only. The bada platform team is not
     * responsible for any behavioral correctness, consistency, and
     * security-related issues that might arise after using this variable.
     *
     * @since 1.1 
     */
	Osp::Base::String	__caseName;
    /**
     *@internal
     * This variable is for internal use only. The bada platform team is not
     * responsible for any behavioral correctness, consistency, and
     * security-related issues that might arise after using this variable.
     *
     * @since 1.1 
     */
	TestFixtureType	*__pTestFixture;
    /**
     *@internal
     * This variable is for internal use only. The bada platform team is not
     * responsible for any behavioral correctness, consistency, and
     * security-related issues that might arise after using this variable.
     *
     * @since 1.1 
     */
	void (TestFixtureType::*__pTestMethod)(void);

private:
	friend class StressTestCase;
};

}}
#endif /* _FTEST_SIMPLE_TEST_CASE_H_ */
