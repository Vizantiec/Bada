/* $Change: 1267243 $ */
//
// Copyright (c) 2011 Samsung Electronics Co., Ltd.
// All rights reserved.
 
// This software contains confidential and proprietary information 
// of Samsung Electronics Co., Ltd.
// The user of this software agrees not to disclose, disseminate or copy such 
// Confidential Information and shall use the software only in accordance with 
// the terms of the license agreement the user entered into with Samsung.
//
/** 
 * @file	FLocIMap.h
 * @brief	This is the header file for the %IMaps interface.
 *
 * This header file contains the declarations of the %IMaps interface.
 *
 */

#ifndef _FLOC_IMAP_H_
#define _FLOC_IMAP_H_

#include "FLocationConfig.h"
#include "FGrpPoint.h"
#include "FLocRectangleGeographicArea.h"


// Forward declaration
namespace Osp { namespace Locations {
	class Coordinates;
}; };
namespace Osp { namespace Graphics {
	class Canvas;
}; };

namespace Osp { namespace Locations { namespace Services {

// Forward declaration
class MapServicePreferences;

/**
 * @interface	IMaps
 * @brief		This interface provides a dynamic map generated by a map service provider.
 * @deprecated	This interface is deprecated because the Osp::Locations::Controls::Map class provides the same functionalities in a more effective way.
 *				Instead of using this interface, use the Osp::Locations::Controls::Map class. 
 *
 * @deprecated	This interface is deprecated.
 * @since		1.0
 * 
 * 		       The %IMaps interface provides a dynamic map generated by a map service provider. An instance of this interface can be used by an application, to render a map based on the context provided. @n
 *
 * 				The size of the area where the map is rendered, is set when the IMapServiceProvider::GetMapN() method is called. The size is specified in 
 *				pixels. An application sets an initial viewport for the map in the service request. This viewport is the area of the map rendered to the 
 *				graphics context and specified as the rectangular geographic area. The actual map may contain an area larger than the initial viewport to 
 *				enable panning and moving of the map. @n
 * 
 * 				%IMaps is a mutable instance. Therefore, after getting an %IMaps object, an application can modify the viewport of the map. It can pan, 
 *				rotate, zoom, or move the viewport as required. After performing any of these operations, the results can be viewed by calling the @ref 
 *				RenderMap() method. The realized new viewport of a map can be retrieved with the @ref GetViewport() method. An application controls the 
 *				layers and the map base used in the @ref RenderMap() method through the MapServicePreferences that are set using the 
 *				@ref SetMapServicePreferences() method and retrieved with the @ref GetMapServicePreferencesN() method. @n
 *
 *				The success of the operations on the map is indicated with the return values of the methods. If the requested operation cannot be performed 
 *				on the map, the application should retrieve a new %IMaps object from the map service provider. @n
 *
 * 				Some method implementations may retrieve the map data over the network. Therefore, the complete map may not be instantly available for 
 *				rendering. In the RenderMap() method, an application can control whether all the content must be rendered when the method is called, or if 
 *				the implementation, may only render the data it currently has. An application receives notifications about the new map data through the 
 *				IMapServiceListener interface, so that it can register the IMapServiceProvider::GetMapN() service request. When the map service provider has 
 *				the new map data available, the application is notified through the IMapServiceListener::OnMapContentUpdated() callback method. @n
 *
 * 				This class provides two convenient methods that help in converting points on the map to WGS 84 coordinates and vice versa.
 *
 */
class _EXPORT_LOCATION_ IMaps
{
// Lifecycle
public:
	/**
	 * This is the destructor for this interface.
	 *
	 * @deprecated	This method is deprecated.
	 * @since	1.0
	 */
	virtual ~IMaps(void);

// Operation
public:
	
	/**
	 * Aborts the ongoing @ref RenderMap() method execution. @n
	 * The @ref RenderMap() method throws an E_INTERRUPTED exception, when this method is called. This method also cancels all the ongoing requests over the 
	 * network. If the ongoing requests exist, IMapServiceListener::OnMapRequestAborted() is called.
	 *
	 * @deprecated	This method is deprecated.
	 * @since	1.0
	 */
	virtual void Abort(void) = 0;

	/**
	 * Centers the map as per the specified coordinates. @n
	 * The size of the viewport does not change and the new viewport area can be retrieved with the @ref GetViewport() method. @n
	 * This method returns the number of pixels the map has moved. The movement towards the left and upwards are indicated by negative number of pixels, and the downward 
	 * and right movements are indicated by positive number of pixels.
	 *
	 * @deprecated	This method is deprecated.
	 * @since			1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior to 2.0. @n
	 *					For more information, see @ref IMapsCenterOnCoordinatesPage "here".
	 * @return			An error code
	 * @param[in]		center			The coordinates where the map is to be centered
	 * @param[out]		movedX			An integer value indicating the number of pixels moved in the horizontal direction
	 * @param[out]		movedY			An integer value indicating the number of pixels moved in the vertical direction
	 * @exception		E_SUCCESS		The method is successful.
	 * @exception		E_INVALID_ARG	The specified @c center is within the area where the %IMaps object does not provide the map.
	 */
	virtual result CenterOnCoordinates(const Coordinates& center, int& movedX, int& movedY) = 0;

	/**
	 * @page		IMapsCenterOnCoordinatesPage	Compatibility for CenterOnCoordinates()
	 *
	 * @section		IMapsCenterOnCoordinatesPageIssueSection	Issues
	 * Implementation of this method in bada API versions prior to 2.0 has the following issue: @n
	 * -# @c movedX and @c movedY have a positive value if the map moves upwards and towards the left and
	 *    @c movedX and @c movedY have a negative value if the map moves downwards and towards the right.
	 *
	 * @section		IMapsCenterOnCoordinatesPageResolutionSection	Resolutions
	 * The issue mentioned above is resolved in bada API version 2.0 and it is recommended to use bada API version 2.0 or above.
	 *
	 * @par
	 * When working with bada API versions prior to 2.0:
	 * Multiply @c movedX and @c movedY by @c (-1).
	 */

	/**
	 * Gets the current azimuth of the map.
	 *
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		A floating value indicating the azimuth of the map, @n
	 *				else @c 0 if the value is not set
	 * @remarks		This value is set by the @ref Rotate() method.
	 */
	virtual float GetAzimuth(void) const = 0;


	/**
	 * Gets the height of the map in pixels.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		An integer value indicating the height of the map in pixels
	 * @remarks		This value is set when requesting for the map from the service provider with the IMapServiceProvider::GetMapN() method or in the 
	 *				@ref SetSize() method.
	 */
	virtual int GetHeight(void) const = 0;

	/**
	 * Gets the service preferences set for the %IMaps object.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		A pointer to the service preferences @n
	 *				The default values of the service preferences are returned, if the preferences have not been set for the IMap object.
	 * @remarks		The service preferences are set by the @ref SetMapServicePreferences() method. @n
	 * 				After use, the returned MapServicePreferences must be deleted.
	 *
	 */
	virtual MapServicePreferences* GetMapServicePreferencesN(void) const = 0;

	/**
	 * Gets the maximum zoom level supported by the %IMaps object. @n
	 * The minimum zoom level of the %IMaps objects is always @c 1.0. The zoom level supported by the %IMaps object ranges from @c 1.0 to the number returned 
	 * from this method. If, for example, the method returns @c 4.0, the supported zoom levels are [1.0, 4.0].
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		A @c float value indicating the maximum zoom level
	 */
	virtual float GetMaxZoomLevel(void) const = 0;

	/**
	 * Gets a RectangleGeographicArea object that defines the current viewport of a map. @n
	 * If the map has been rotated, this method returns the minimum RectangleGeographicArea that contains the rotated viewport area. In this case,
	 * the returned area may be greater than the rotated viewport.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		The viewport of the map as a geographic area
	 */
	virtual RectangleGeographicArea GetViewport(void) const = 0;

	/**
	 * Gets the width of the map in pixels.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		The width of the map in pixels
	 * @remarks		The width is set when requesting for the map from the service provider with the IMapServiceProvider::GetMapN() method or in the 
	 *				@ref SetSize() method.
	 */
	virtual int GetWidth(void) const = 0;

	/**
	 * Gets the current zoom level used in the %IMaps object. @n
	 * The returned value is within the range [1.0, maximum zoom level].
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		The current zoom level of the map
	 * @remarks		The maximum zoom level can be retrieved by the @ref GetMaxZoomLevel() method.
	 */
	virtual float	GetZoomLevel(void) const = 0;

	/**
	 * Pans the map in the specified direction. @n
	 * The map can be panned upwards, downwards, left, or right. The movement towards the left and upwards are indicated by negative number of pixels, and 
	 * the movements towards the right and downwards are indicated by positive number of pixels. This method returns the number of pixels that were panned. @n
	 * 
	 * The value of @c wholeAmount helps an application decide whether panning is completely or partially allowed. If this parameter is @c true and the 
	 * requested amount of pixels cannot be panned, the method returns without action and the returned point contains two @c 0 values.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		An instance of Point where Point.x contains the number of pixels moved in the horizontal direction and Point.y contains the number of 
	 *				pixels moved in the vertical direction
	 *			
	 * @param[in]	point			The number of pixels to be panned in each direction
	 * @param[in]	wholeAmount		Set to @c true to check whether panning is done, only if the requested amount of pixels can be panned, @n
									else @c false if partial panning is accepted by the application
	 * @remarks		The new viewport to the map can be retrieved by the @ref GetViewport() method.
	 */
	virtual Osp::Graphics::Point	Pan(const Osp::Graphics::Point& point, bool wholeAmount) = 0;

	/**
	 * Renders the map to the specified graphics context. @n
	 * The map service provider must render at least the current viewport (geographic area). @n
	 *
	 * When new map content is unavailable, either a partial map is rendered or nothing is rendered and a request for the complete map goes out to the server 
	 * or to the map engine. The IMapServiceListener has been set in the IMapServiceProvider::GetMapN() method call. @n
	 * When new map content is available, an application is notified through the IMapServiceListener::OnMapContentUpdated() callback method. After receiving 
	 * this notification, the application should render the map again.
	 * 
	 * If an error occurs while requesting the complete map from the server or the map engine, IMapServiceListener::OnMapRequestErrorOccurred() is called. @n
	 *
	 * This is a synchronous method and it blocks the request, until the map has been rendered completely. The application may cancel the synchronous request 
	 * with the @ref Abort() method.
 	 * 
	 * @deprecated	This method is deprecated.
     * @since		1.0
	 * @privlevel	NORMAL
	 * @privgroup	LOCATION_SERVICE
	 *
	 * @return		An error code
	 * @param[in]	canvas				The graphics context the map is rendered to
	 * @param[out]	completeMap			Set to @c true to check whether the full map content is rendered, @n
	 *									else @c false if partial map or nothing is rendered
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_INTERRUPTED		The requested operation cannot be performed further due to an interruption from another thread.
	 * @exception   E_OUT_OF_MEMORY		The memory is insufficient.  
	 * @exception   E_SYSTEM  			A system error has occurred.  
	 * @exception   E_PRIVILEGE_DENIED  The application does not have the privilege to call this method.
	 */
	virtual result	RenderMap(Osp::Graphics::Canvas& canvas, bool& completeMap) = 0;

	/**
	 * Rotates the map to the specified azimuth. @n
	 * An azimuth is specified as degrees from true north. The support for rotation can be checked with the ProviderCapabilities::GetPropertyValue() method 
	 * using @ref ProviderCapabilities::MAP_SUPPORTS_MAP_ROTATION as the property key. If the service provider that constructed this object does not support 
	 * rotation and the azimuth value is not 0.0, this method throws an E_INVALID_ARG exception. If rotation is supported, but the map cannot be rotated to 
	 * the given azimuth, the map is rotated to the closest possible azimuth. If the requested azimuth is in the middle of two supported azimuths, the 
	 * rotation is done to the smaller supported azimuth. The realized rotation azimuth is returned. If the rotation fails, Not-a-Number (NaN) is returned. @n
	 *
	 * When the map is rotated, the geographical area shown on the map changes. The center point of the geographical area remains the same. The new viewport 
	 * is the area around the center point that fits into the current graphics context. The zoom level must not be changed. The geographical area can be 
	 * retrieved with the @ref GetViewport() method.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		An error code
	 * @param[in]	azimuth			The rotation angle from true north in the clockwise direction
	 * @param[out]	rotatedAzimuth	The azimuth to which the map is rotated, @n
	 *								else @c Not-a-Number (NaN) if the rotation has failed
	 * @exception	E_SUCCESS 		The method is successful.
	 * @exception	E_INVALID_ARG 	The specified @c azimuth is less than @c 0.0 or greater than or equal to @c 360.0, or @n
	 *								the map service provider does not support rotation when the azimuth is other than @c 0.0. 
	 */
	virtual result Rotate(float azimuth, float& rotatedAzimuth) = 0;

	/**
	 * Sets new preferences to the current IMaps object.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		An error code
	 * @param[in]	pPreferences	The preferences to be used in the RenderMap() method @n
	 *								This parameter is set to @c null to indicate default preferences.
	 * @exception	E_SUCCESS 		The method is successful.
	 * @exception	E_INVALID_ARG 	The specified @c pPreferences are not the preferences for the service provider used to retrieve this object.
	 * @remarks		These preferences are used in the RenderMap() method when rendering the map to the graphics context. If an application does not call this 
	 * after the current %IMaps object is returned by the IMapServiceProvider::GetMapN() method, the default values of the service preferences are used.
	 */
	virtual result SetMapServicePreferences(const MapServicePreferences* pPreferences) = 0;

	/**
	 * Sets the size of the area where the map is rendered. @n
	 * The specified width and height form the minimum area of the map, that is rendered with the @ref RenderMap() method. This method can be used, for 
	 * example, if the orientation of the device display changes. The new size is specified in pixels. @n
	 * 
	 * The value of @c keepZoomLevel, helps an application to analyze how the change in the area size affects the map. If @c keepZoomLevel is set to @c true, 
	 * the zoom level of the map remains the same, and only the area shown changes. If @c keepZoomLevel is @c false, the zoom level of the map changes and 
	 * implementation does its best to show the same area that is shown before calling this method. In both cases, the coordinates of the center point of 
	 * the viewport must remain the same.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		An error code
	 * @param[in]	width			The width of the area in pixels
	 * @param[in]	height			The height of the area in pixels
	 * @param[in]	keepZoomLevel	Set to @c true to keep the zoom level, @n
	 *								else @c false to change the zoom level
	 * @exception	E_SUCCESS 		The method is successful.
	 * @exception	E_INVALID_ARG 	The specified @c width or @c height is less than or equal to @c 0.
	 */
	virtual result SetSize(int width, int height, bool keepZoomLevel) = 0;

	/**
	 * Sets a new viewport for the map. @n
	 * Sets the viewport in the direction to true north. If an application needs a rotated viewport, it must call the Rotate() method after executing this 
	 * method. Setting the viewport may fail if the viewport is outside the supported area.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		@c true if the new viewport is successfully set, @n
	 *				else @c false
	 * @param[in]	area	The new viewport for the map
	 */
	virtual bool SetViewport(const RectangleGeographicArea& area) = 0;

	/**
	 * Sets a new zoom level for this %IMaps object. @n
	 * The value must be within the range of [1.0, maximum zoom level]. The maximum zoom level can be retrieved with the @ref GetMaxZoomLevel() method. If 
	 * the new zoom level is less than the current zoom level, the map is zoomed out. If the new zoom level is greater than the current zoom level, the 
	 * map is zoomed in. @n
	 *
	 * The support for continuous zoom can be checked with the ProviderCapabilities::GetPropertyValue() method using 
	 * @ref ProviderCapabilities::MAP_SUPPORTS_CONTINUOUS_ZOOM as the property key. This key is supported from bada API version 2.0. @n
	 * 
	 * In case the continuous zoom is not supported, only integer values are available for the zoom level. If the zoom level is not an integer value, 
	 * the nearest integer value will be set instead of the given zoom level.
	 *
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		An error code
	 * @param[in]	level			The new zoom level for the map
	 * @exception	E_SUCCESS 		The method is successful.
	 * @exception	E_INVALID_ARG 	The specified @c level is not in the valid range of [1.0, maximum zoom level].
	 * @remarks		The map images from the map service are always shown as non-scaled bitmaps. This means that the applications may display a different 
	 * 				region of the map on different screen resolutions even when using the same zoom level. To guarantee that a map shows a certain region 
	 *				regardless of the resolution, use the SetViewport() method instead of the SetZoomLevel() method.
	 */
	virtual result SetZoomLevel(float level) = 0;

	/**
	 * Converts a point on the area where the map is rendered into WGS 84 coordinates. @n
	 * The X and Y coordinates are presented in the coordinate system of the rendering area. The origin point is the top-left corner of the area. The values 
	 * on the x-axis grow towards the right. The values on the y-axis grow downwards. Pixels outside the current rendered area may also be specified. The 
	 * returned @ref Coordinates object does not include any information about the altitude. This value is set to Not-a-Number (NaN) in the object.
	 *
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		@c true if the conversion is successful, @n
	 *				else @c false
	 * @param[in]	point					The position of the point in the area where the map is rendered
	 * @param[out]	convertedCoordinates	The converted coordinates
	 */
	virtual bool	TransformPixelsToCoordinates(const Osp::Graphics::Point& point, Coordinates& convertedCoordinates) const = 0;

	/**
	 * Converts the coordinates in the WGS 84 projection system into the coordinate system of the area where the map is rendered. @n
	 * The returned Point.x contains the point on the x-axis and Point.y contains the point on the y-axis of the rendering area. The origin point is the top 
	 * left corner of the current viewport. The values on the x-axis increase towards the right. The values on the y-axis decrease downwards. Even if the 
	 * specified coordinates are not within the viewport, the rendering area coordinates are returned in relation to the origin point.
	 * 
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return		@c true if the conversion is successful, @n
	 *				else @c false
	 * @param[in]	coord			The coordinates in the WGS 84 projection system to be converted
	 * @param[out]	convertedPoint	The converted point
	 */
	virtual bool TransformCoordinatesToPixels(const Coordinates& coord, Osp::Graphics::Point& convertedPoint) const = 0;

	/**
	 * Converts the coordinates in the WGS 84 projection system into the coordinate system of the area where the map is rendered. @n
	 * The returned Point.x contains the point on the x-axis and Point.y contains the point on the y-axis of the rendering area. The origin point is the top 
	 * left corner of the current viewport. The values on the x-axis increase towards right. The values on the y-axis decrease downwards.
	 * Even if the specified coordinates are not within the viewport, the rendering area coordinates are returned with respect to the origin point.
	 *
	 * This method has the same functionality as TransformCoordinatesToPixels(Coordinates, Point), but this accepts multiple coordinates as the input.
	 * It is useful in converting the coordinates list of a polygon or a polyline.
	 *
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return   	A list of the @ref Osp::Graphics::Point instances, @n
	 *				else @c null if the conversion of all the coordinates is not successful
	 * @param[in] 	coordinatesList     The list of the @ref Coordinates instances in the WGS 84 projection system to be converted
	 * @exception   E_SUCCESS 			The method is successful.
	 * @exception	E_INVALID_ARG 		The specified @c coordinatesList is empty or contains an object not of type %Coordinates.
	 * @exception	E_OUT_OF_MEMORY  	The memory is insufficient.
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 * @remarks		If a map is drawn repeatedly at a low zoom level, the coordinates can be transformed to multiple corresponding points, but the returned 
	 *				point should be one of them. In this case, the first coordinate of the input list is transformed to the nearest point from the center of 
	 *				the map. The other coordinates are transformed to the nearest point from the previous point in the returned list.
	 *
	 */
	virtual Osp::Base::Collection::IList* TransformCoordinatesToPixelsN(const Osp::Base::Collection::IList& coordinatesList) const = 0;

	/**
	 * Gets the width of the world map in pixels. @n
	 * A provider may draw the map repeatedly along the x-axis at a low zoom level. This method returns the width of the world map in the current zoom level.
	 *
	 * @deprecated	This method is deprecated.
	 * @since		1.0
	 * @return  	The width of the world map in pixels that is greater than @c 0
	 */
	virtual int GetGlobalMapWidthInPixels(void) const = 0;
};	// class IMaps

}; }; };	// Osp::Locations::Services

#endif // _FLOC_IMAP_H_
