/* $Change: 1142016 $ */
//
// Copyright (c) 2011 Samsung Electronics Co., Ltd.
// All rights reserved.
 
// This software contains confidential and proprietary information 
// of Samsung Electronics Co., Ltd.
// The user of this software agrees not to disclose, disseminate or copy such 
// Confidential Information and shall use the software only in accordance with 
// the terms of the license agreement the user entered into with Samsung.
//
/** 
 * @file		FTextDecoder.h 
 * @brief		This is the header file for the %Decoder class.
 *
 * This header file contains the declarations of the %Decoder class. 
 */

#ifndef _FTEXT_DECODER_H_
#define _FTEXT_DECODER_H_

// Include
#include "FBaseObject.h"
#include "FBaseTypes.h"
#include "FBaseBuffer.h"
#include "FTextConfig.h"


namespace Osp { namespace Text {
/**
 * @class	Decoder
 * @brief	This class is an implementation of the character decoder.
 * @since	1.0
 *
 * The %Decoder class converts blocks of encoded bytes into blocks of Unicode characters 
 * through successive calls to the GetChars() method. This class maintains state consistency information between 
 * successive calls to GetChars(), enabling it to decode a sequence of bytes that span adjacent blocks.
 *
 * For more information on the class features, see <a href="../com.osp.cppappprogramming.help/html/dev_guide/text/converting_text_data_separate_blocks.htm">Converting Text Data in Separate Blocks</a>.
 *
 */

class _EXPORT_TEXT_ Decoder :
	public Osp::Base::Object
{
// Lifecycle
public:
	/** 
	 * This is the destructor for this class.
	 *
	 * @since	1.0
	 */
	virtual ~Decoder(void) { };
// Operations
public:
	/** 
	 * Calculates the total number of characters that are generated by decoding a range of elements specified in the %ByteBuffer instance.

	 *
	 * @since			1.0
	 * @return		An error code
	 * @param[in]	bytes An instance of %ByteBuffer that is to be decoded
	 * @param[in]   byteIndex The index from where decoding begins
	 * @param[in]   byteCount The total number of bytes to decode
	 * @param[out]  charCount The total number of characters that are generated by decoding the specified %ByteBuffer instance
	 * @param[in]   flush Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *						else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or 
	 *                                         the specified @c bytes is empty.
	 * @exception	E_OUT_OF_RANGE        The value of an argument is outside the valid range defined by the method, or 
	 *										   the length of the specified @c byteIndex or @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_UNDERFLOW              This operation has caused the memory to underflow, or
	 *								           the sum of the length of the specified @c byteIndex and @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_INVALID_ENCODING_RANGE	The specified string contains code points that are outside the bounds of the character encoding scheme. 	
     *          
	 * @see         Encoder::GetByteCount()
	 */
	virtual result GetCharCount(const Osp::Base::ByteBuffer& bytes, 
		int byteIndex, int byteCount, int& charCount, bool flush = false) = 0;

	/** 
	 * Decodes an instance of %ByteBuffer into an instance of McharBuffer.
	 *
	 * @since			1.0
	 * @return		A pointer to the McharBuffer instance where the resultant decoded data is stored, @n
	 *				else @c null if an exception occurs @n
	 *				The buffer limit is the position of the last decoded byte plus one in the buffer and the starting position is zero.
	 * @param[in]	bytes An instance of %ByteBuffer that is to be decoded
   * @param[in]   flush Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *				else @c false
   * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_OUT_OF_MEMORY          The memory is insufficient.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or 
	 *                                         the specified @c bytes is empty.
	 * @exception	E_INVALID_ENCODING_RANGE The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 *
	 * @see			Encoder::GetBytesN()
	 */
	virtual Osp::Base::McharBuffer* GetCharsN(const Osp::Base::ByteBuffer& bytes, bool flush = false) = 0;

	/** 
	 * Decodes an instance of %ByteBuffer into an instance of McharBuffer as per the specified range.
	 *
	 * @since			1.0
	 * @return		A pointer to the McharBuffer instance where the resultant decoded data is stored, @n
	 *				else @c null if an exception occurs @n
	 *				The buffer limit is the position of the last decoded byte in the buffer and the starting position is zero.
	 * @param[in]	bytes An instance of %ByteBuffer that is to be decoded
	 * @param[in]   byteIndex The index from where decoding begins
	 * @param[in]   byteCount The total number of bytes to decode
	 * @param[in]   flush Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *				else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_OUT_OF_MEMORY          The memory is insufficient.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or 
	 *                                         the specified @c bytes is empty.
	 * @exception	E_OUT_OF_RANGE	     The value of an argument is outside the valid range defined by the method, or
	 *									       the length of the specified @c byteIndex or @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_UNDERFLOW	             This operation has caused the memory to underflow, or
	 *										   the sum of the length of the specified @c byteIndex and @c byteCount is greater than the length of the specified @c bytes. 
	 * @exception	E_INVALID_ENCODING_RANGE The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @remarks     The GetChars() method maintains state consistency between conversions. 	
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 * @remarks		The pointer to the McharBuffer instance is not terminated by a @c null character.
	 *
	 * @see			Encoder::GetBytesN()
	 */
	virtual Osp::Base::McharBuffer* GetCharsN(const Osp::Base::ByteBuffer& bytes, int byteIndex, int byteCount, 
		bool flush = false) = 0;

private:
	friend class DecoderEx;
	class DecoderEx* __pDecoderEx;
};

} }// Osp::Text
#endif//_FTEXT_DECODER_H_












