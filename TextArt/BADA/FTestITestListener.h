/* $Change: 431318 $ */
//
// Copyright (c) 2011 Samsung Electronics Co., Ltd.
// All rights reserved.

// This software contains confidential and proprietary information
// of Samsung Electronics Co., Ltd.
// The user of this software agrees not to disclose, disseminate or copy such
// Confidential Information and shall use the software only in accordance with
// the terms of the license agreement the user entered into with Samsung.
//
/**
 * @file		FTestITestListener.h
 * @brief		This is the header file for the %ITestListener interface.
 *
 * This header file contains the declarations of the %ITestListener interface. @n
 * This interface implements/provides a listener for test and result events.
 */
#ifndef _FTEST_ITEST_LISTENER_H_
#define _FTEST_ITEST_LISTENER_H_

#include <FBaseString.h> 

namespace Osp { namespace Test {

/**
* @enum 	TestObjectType
* Defines the object type of a test. @n
* This enumeration is used in the %ITestListener interface.
*
* @since	1.0
*/
enum TestObjectType {
	TEST_RUNNER = 0,		/**<The object type: TestRunner */
	TEST_SUITE,				/**<The object type: TestSuite */
	TEST_FIXTURE,			/**<The object type: TestFixture */
	TEST_CASE,				/**<The object type: TestCase */
};


/**
* @enum 	TestEventType
* Defines the event type of a test.
*
* @since	1.0
*/
enum TestEventType {
	TEST_START = 0,							/**<The event generated by a TestSuite, TestCase, or TestRunner when they are executed*/
	TEST_COMPLETED,							/**<The event generated by a %TestSuite, %TestCase, or %TestRunner when completed*/
	TEST_SUCCESS, 							/**<The event generated when the test result of a %TestCase is a success*/
	TEST_FAILURE,							/**<The event generated when a failure occurs while executing a %TestCase*/
	TEST_ERROR,								/**<The event generated when an error occurs while executing a %TestCase*/
	TEST_ERROR_SETUP_BEFORE_TESTSUITE,		/**<The event generated when an error occurs while running SetUpBeforeTestSuite of a TestFixture */
	TEST_ERROR_TEARDOWN_AFTER_TESTSUITE,	/**<The event generated when an error occurs while running TearDownAfterTestSuite of a %TestFixture */
};

/**
 * @interface		ITestListener
 * @brief		This interface provides a listener for a test in progress and results.
 * @since		1.1
 *
 * The %ITestListener interface provides a listener for handling events related to the test in progress.
 * To obtain information of the test in progress, you must implement this interface.
 * After that, you must register the class with either TestRunner or TestSuite classes to get the events of your test.
 *
 * The following example demonstrates how to use the %ITestListener interface.
 *
 * @code
 *
 * class OspTestListener : public ITestListener {
 *  public :
 *    void OnTestEventReceived( const Osp::Base::Object& testObject, Osp::Test::TestObjectType testObjectType, Osp::Test::TestEventType testEvent,const Osp::Base::String& message, long executionTime, const Osp::Base::String& filePath, int lineNum) {
 *       if( testEvent == TEST_START && testObjectType  == TEST_RUNNER) {
 *           AppLog("TestRunner is started.");
 *       }
 *       else if ( testEvent == TEST_COMPLETED && testObjectType  == TEST_RUNNER) {
 *          AppLog("TestRunner is completed.");
 *       }
 *	}
 * };
 *
 * ...
 * OspTestListener* pTestListener = new OspTestListener();
 * TestRunner* pTestRunner = new TestRunner("TestBankAccount");
 * pTestRunner->AddTestListener(*pTestListener);
 * pTestRunner->Start(null);
 * ...
 * @endcode
 *
 *
 */
class ITestListener
{
public:
	/**
	 * Called when an event is received while running a test. 
	 *
	 * @since		1.1
	 *
	 * @param[in]	testEvent		The test event type
	 * @param[in]	testObjectType	The test object type
	 * @param[in]	testObject		An instance of Object
	 * @param[in]	message			The message of an assertion or an error, @n
	 *								else the value of the message is L""
	 * @param[in]	executionTime	The time spent in testing TestCase, TestSuite, TestRunner
	 * @param[in]	filePath		The file's path that creates %TestCase, if the event is TEST_SUCCESS or TEST_ERROR, TEST_ERROR_SETUP_BEFORE_TESTSUITE, TEST_ERROR_TEARDOWN_AFTER_TESTSUITE @n
	 * 								The file's path that makes an assertion, if the event is TEST_FAILURE, @n
	 *								else the value of @c filePath is L"". 
	 * @param[in]	lineNum			The line number in the file path @n
	 *						 		If the value of @c filePath is L"", the value of @c lineNum is @c 0.
	 *
     * The TestObject class is a subclass of Osp::Base::Object.
	 * Therefore, to use the test object of a specific type, use typecasting.
	 *
	 * The following example demonstrates how to do this.
	 *
	 * @code
	 * void OnTestEventReceived( const Osp::Base::Object& testObject, Osp::Test::TestObjectType testObjectType, Osp::Test::TestEventType testEvent,const Osp::Base::String& message, long executionTime, const Osp::Base::String& filePath, int lineNum)  {
	 * 	if( testEvent == TEST_COMPLETED && testObjectType  == TEST_RUNNER) {
	 *		TestRunner* pRunner = static_cast<TestRunner*>&testObject;
	 *		AppLog("The test of TestRunner(%ls) is completed.", pRunner->GetName()->GetPointer());
	 *		if( pRunner->GetTestResult() != null)
	 *			AppLog("The number of successes is %d.", pRunner->GetTestResult()->GetNumberOfSuccesses());
	 *		...
	 * 	}
	 * }
	 * @endcode
	 */
	virtual void OnTestEventReceived( const Osp::Base::Object& testObject, TestObjectType testObjectType, TestEventType testEvent,const Osp::Base::String& message, long executionTime, const Osp::Base::String& filePath, int lineNum) = 0;

};

}}
#endif /* _FTEST_ITEST_LISTENER_H_ */
