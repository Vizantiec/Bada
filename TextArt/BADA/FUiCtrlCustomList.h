/* $Change: 1142016 $ */
//
// Copyright (c) 2011 Samsung Electronics Co., Ltd.
// All rights reserved.
 
// This software contains confidential and proprietary information 
// of Samsung Electronics Co., Ltd.
// The user of this software agrees not to disclose, disseminate or copy such 
// Confidential Information and shall use the software only in accordance with 
// the terms of the license agreement the user entered into with Samsung.
//
/**
 * @file	FUiCtrlCustomList.h
 * @brief	This is the header file for the %CustomList class.
 *
 * This header file contains the declarations of the %CustomList class and its helper classes.
 */

#ifndef _FUICTRL_CUSTOMLIST_H_
#define _FUICTRL_CUSTOMLIST_H_

//Includes
#include "FBaseObject.h"
#include "FBaseTypes.h"
#include "FGrpRectangle.h"
#include "FUiControl.h"
#include "FUiContainer.h"
#include "FUiCtrlConfig.h"
#include "FUiCtrlCustomListEnum.h"
#include "FUiCtrlBackgroundEnum.h"
#include "FUiICustomItemEventListener.h"
#include "FUiCtrlCustomListItem.h"
#include "FUiCtrlListEnum.h"

namespace Osp { namespace Ui { namespace Controls {
/**
 * @class		CustomList
 * @brief 		This class defines the common behavior of a %CustomList control.
 * @deprecated	This class is deprecated. Instead of using this class, use %ListView class. 
 * @since		1.0
 *
 * The %CustomList class represents a list which has user-configured items. An item in a custom list can have 
 * different layout and height than the other items. Each item is composed of elements, which can be texts and bitmaps 
 * and is configured using CustomListItem and CustomListItemFormat.
 * 
 * When an item in a custom list is selected or deselected, an item event is generated. It is passed on to all item event listeners 
 * that have registered an interest in item events generated by the custom list. If an application wants to perform tasks when a custom 
 * list item is selected and deselected, it should implement ICustomItemEventListener and register the listener to receive events from 
 * the custom list by calling the custom list's AddCustomItemEventListener() method. 
 * 
 * Note that CustomListItem and CustomListItemFormat need to be created on a heap. The items of a custom list are deleted automatically  
 * when the %CustomList control is destroyed. If you want to remove certain list items, you must use RemoveItemAt(). CustomListItemFormat 
 * should be deleted by the application.
 * 
 * Refer to CustomListItem and CustomListItemFormat.
 *
 * Example:
 * 
 * @image html GUI_customlist.png
 *
 *
 * This is a simple UI application that uses a %CustomList control.
 *
 *
 * @code
	
//Sample code for CustomListSample.h
#include <FBase.h>
#include <FUi.h>
#include <FGraphics.h>

// Forward Declaration
class CustomListElement;

class CustomListSample :
    public Osp::Ui::Controls::Form,
    public Osp::Ui::ICustomItemEventListener
{
public:
    CustomListSample(void)
    :__pCustomList(null)
    ,__pCustomListItemFormat(null){}

protected:
    static const int ID_LIST_ITEM = 101;
    static const int ID_LIST_TEXT = 102;
    static const int ID_LIST_BITMAP = 103;
    static const int ID_FORMAT_CUSTOM = 104;

    Osp::Graphics::Bitmap* GetBitmapN(void);
    result AddListItem(Osp::Ui::Controls::CustomList& customList, Osp::Base::String itemText,
            Osp::Graphics::Bitmap* pBitmapNormal, Osp::Graphics::Bitmap* pBitmapFocused);

public:
    virtual result OnInitializing(void);
    virtual result OnTerminating(void);
    virtual void OnItemStateChanged(const Osp::Ui::Control& source, int index, int itemId, Osp::Ui::ItemStatus status);
    virtual void OnItemStateChanged(const Osp::Ui::Control& source, int index, int itemId, int elementId, Osp::Ui::ItemStatus status);

private:
    Osp::Ui::Controls::CustomList* __pCustomList;
    Osp::Ui::Controls::CustomListItemFormat* __pCustomListItemFormat;
    CustomListElement* __pListElement;
};

// Sample code for CutomListSample.cpp
#include "CustomListSample.h"

using namespace Osp::Base;
using namespace Osp::Ui;
using namespace Osp::Ui::Controls;
using namespace Osp::Graphics;

class CustomListElement : public ICustomListElement
{
public:
    result DrawElement(const Osp::Graphics::Canvas& canvas, const Osp::Graphics::Rectangle& rect, CustomListItemStatus itemStatus)
    {
        result r = E_SUCCESS;

        Canvas* pCanvas = const_cast<Canvas*>(&canvas);

        pCanvas->SetLineWidth(5);
        pCanvas->SetForegroundColor(Color::COLOR_GREEN);
        if (pCanvas->DrawRectangle(rect) != E_SUCCESS)
            return r;

        pCanvas->SetForegroundColor(Color::COLOR_WHITE);
        if (pCanvas->DrawText(Point(rect.x+20, rect.y+20), L"Custom") != E_SUCCESS)
            return r;

        return r;
    }
};

result
CustomListSample::OnInitializing(void)
{
    result r = E_SUCCESS;

    // Creates CustomListElement
    __pListElement = new CustomListElement();

    // Create Bitmap
    Bitmap *pBitmapNormal  = GetBitmapN();
    Bitmap *pBitmapFocused = GetBitmapN();

    // Creates CustomList
    __pCustomList = new CustomList();
    __pCustomList->Construct(Rectangle(0, 0, 480, 500), CUSTOM_LIST_STYLE_NORMAL);
    __pCustomList->AddCustomItemEventListener(*this);

    // Creates an item format of the CustomList
    __pCustomListItemFormat = new CustomListItemFormat();
    __pCustomListItemFormat->Construct();
    __pCustomListItemFormat->AddElement(ID_LIST_TEXT, Osp::Graphics::Rectangle(10, 25, 100, 80));
    __pCustomListItemFormat->AddElement(ID_LIST_BITMAP, Osp::Graphics::Rectangle(120, 10, 70, 80));
    __pCustomListItemFormat->AddElement(ID_FORMAT_CUSTOM, Rectangle(320, 20, 80, 60));
    __pCustomListItemFormat->SetElementEventEnabled(ID_LIST_TEXT, true);
    __pCustomListItemFormat->SetElementEventEnabled(ID_LIST_BITMAP, true);
    __pCustomListItemFormat->SetElementEventEnabled(ID_FORMAT_CUSTOM, true);

    // Adds an item to the CustomList
    for(int i=0;i<1000;i++)
    {
        String str = L"Text";
        str.Append(i+1);
        AddListItem(*__pCustomList, str, pBitmapNormal, pBitmapFocused);
    }

    // Adds a CustomList to the Form
    AddControl(*__pCustomList);

    // Display the Form
    Draw();
    Show();

    // Deallocates a Bitmap
    delete pBitmapNormal;
    delete pBitmapFocused;

    return r;
}

result
CustomListSample::OnTerminating(void)
{
    result r = E_SUCCESS;

    // Deallocates an item format
    delete __pCustomListItemFormat;
    delete __pListElement;

    return r;
}

result
CustomListSample::AddListItem(CustomList& customList, String itemText, Bitmap* pBitmapNormal, Bitmap* pBitmapFocused)
{
    // Creates an item of the CustomList
    CustomListItem* pItem = new CustomListItem();

    pItem->Construct(100);
    pItem->SetItemFormat(*__pCustomListItemFormat);
    pItem->SetElement(ID_LIST_TEXT, itemText);
    pItem->SetElement(ID_LIST_BITMAP, *pBitmapNormal, pBitmapFocused);
    pItem->SetElement(ID_FORMAT_CUSTOM, *(static_cast<ICustomListElement *>(__pListElement)));

    customList.AddItem(*pItem, ID_LIST_ITEM);

    return E_SUCCESS;
}

Bitmap*
CustomListSample::GetBitmapN(void)
{
    return null; // You should implement GetBitmapN
}

// Implements an ICustomItemEventListener
void
CustomListSample::OnItemStateChanged(const Control& source, int index, int itemId, ItemStatus status)
{
    switch (itemId)
    {
        case ID_LIST_ITEM:
            // Todo:
            break;
        default:
            break;
    }
}

void
CustomListSample::OnItemStateChanged(const Osp::Ui::Control& source, int index, int itemId, int elementId, Osp::Ui::ItemStatus status)
{
    switch (itemId)
    {
        case ID_LIST_ITEM:
            {
                switch (elementId)
                {
                    case ID_LIST_TEXT:
                        // Todo:
                        break;

                    case ID_LIST_BITMAP:
                        // Todo:
                        break;
                    default:
                        break;
                }
            }
            break;
        default:
            break;
    }
}


 * @endcode
 *
 */
class _EXPORT_CONTROLS_ CustomList : 
	public Osp::Ui::Control
{
	DECL_CLASSTYPE(CustomList);
public : 
	/**
	 * This is the default constructor for this class.
	 *
	 * @since		1.0
	 */
	CustomList(void);

	/**
	 * This is the destructor for this class.
	 *
	 * @since		1.0
	 */
	virtual ~CustomList(void);

	/**
	 * Initializes this instance of %CustomList with the specified parameters.
	 *
	 *
	 * @since    		1.0
	 * @compatibility   This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
     *                  For more information, see @ref CompCustomListConstruct "here".
	 *
	 * @return	  An error code
	 * @param[in]	rect              	The x and y position of the top-left corner of the %CustomList control along with the width and height of the control
	 * @param[in]	style             	The style set of %CustomList
	 * @param[in]	itemDivider			Set to @c true to display the divider, @n
	 *							    	else @c false
	 * @exception	E_SUCCESS         	The method is successful.
	 * @exception E_INVALID_STATE   This instance has already been constructed.
	 * @exception E_INVALID_ARG     A specified input parameter is invalid.
	 * @exception	E_OUT_OF_MEMORY   	The memory is insufficient.
	 * @exception	E_SYSTEM          	A system error has occurred.
	 * @remarks		In the bada API version prior to 2.0, the width and the height of the control must be greater than @c 0.
     * @remarks		From bada API version 2.0, the size of the control must be within the range as defined by the minimum and maximum size.
     * @remarks   The minimum size of this control is 92 x 72 on a WVGA screen, 60 x 48 on a HVGA screen and 46 x 36 on a WQVGA screen.
	 */
	result Construct(const Osp::Graphics::Rectangle& rect, CustomListStyle style, bool itemDivider = true);

	 /**
	 * @page	CompCustomListConstruct	Compatibility for Construct()
	 *
	 * @section	CompCustomListConstructIssues Issues
	 * Implementation of this method in bada API versions prior to 2.0 has the following issue: @n
	 * -# The width and height of the control must be greater than @c 0. @n
	 *	  The E_INVALID_ARG exception is returned in case the width and height of the control are not greater than @c 0. @n
	 * -# When the size specified is smaller than the minimum size of the control, some controls return E_INVALID_ARG, some other controls adjust its bounds 
	 *	  to the minimum size. @n
	 * -# On a WVGA screen, the default minimum sizes are 92x72.
	 *
	 * @section CompCustomListConstructResolutions Resolutions
	 * The issue mentioned above is resolved in bada API version 2.0, and it is recommended to use bada API version 2.0 or above. @n
	 * -# The method returns E_INVALID_ARG when the size specified is smaller than the minimum size of the control or greater than the maximum size of the control. @n
	 * -# The width and height of the control can be @c 0, if its minimum width and height is @c 0. @n
	 * -# On a WVGA screen, the default minimum sizes are changed to 90x72.
	 */

	/**
	 * Adds the custom item event listener instance. @n
	 * The added listener gets notified when the state of CustomListItem is changed.
	 *
	 * @since			1.0
	 * @param[in]	listener	The event listener to be added
	 */
	void AddCustomItemEventListener(const Osp::Ui::ICustomItemEventListener& listener);

	/**
	 * Removes the custom item event listener instance. @n
	 * The removed listener is not notified even when custom item events are fired.
	 *
	 * @since			1.0
	 * @param[in]	listener	The event listener to be removed
	 */
	void RemoveCustomItemEventListener(const Osp::Ui::ICustomItemEventListener& listener);

	/**
	 * Adds the specified item to the %CustomList control.
	 *
	 * @since			1.0
 	 * @return		An error code
	 * @param[in]	item			The custom list item to be added
	 * @param[in] itemId       The item ID for the item
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception	E_SYSTEM		A system error has occurred.
	 * @remarks   The specified @c itemId can be used to identify a specific CustomListItem or @n
     *				to associate user-allocated resources. @n 
     *				Note that the custom list does not throw an exception @n
	 *            if the same itemID is assigned to multiple items. @n
	 * @remarks	The added item is deleted automatically when the list is destroyed. @n
	 *			Do not add, insert, or set an item that already belongs to the %CustomList control.
	 */
    result AddItem(const CustomListItem& item, int itemId = LIST_ITEM_UNSPECIFIED_ID);

	/**
	 * Inserts the specified item to %CustomList at the specified index.
	 *
	 * @since			1.0
	 * @return  	An error code
	 * @param[in] index		        The index at which to insert the item
	 * @param[in]	item				The custom list item to be inserted
	 * @param[in] itemId            The item ID for the item
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception E_INVALID_ARG     A specified input parameter is invalid. @n
     *									The specified @c index is less than @c 0 or greater than the item count.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks		The inserted item is deleted automatically when the list is destroyed. @n
	 *				Do not add, insert, or set an item that already belongs to the %CustomList control.
	 */
	result InsertItemAt(int index, const CustomListItem& item, int itemId = LIST_ITEM_UNSPECIFIED_ID);

   /**
	 * Changes the contents of the item at the specified index in the CustomList control.
   *
   * @since			1.0
   * @return		An error code
   * @param[in] index		    The index at which to set the contents of the item
     * @param[in]	item		    The custom list item to be set
	 * @param[in] itemId          The item ID for the item
     * @exception	E_SUCCESS	    The method is successful.
	 * @exception E_INVALID_ARG   A specified input parameter is invalid. @n 
     *                              The specified @c index is less than @c 0 or greater than or equal to the item count.
	 * @exception	E_SYSTEM		A system error has occurred.
	 * @remarks		Do not add, insert, or set an item that already belongs to the %CustomList control.
   */
	result SetItemAt(int index, const CustomListItem& item, int itemId = LIST_ITEM_UNSPECIFIED_ID);

	/**
	 * Removes the item at the specified index in the %CustomList control.
	 *
	 * @since			1.0
	 * @return		An error code
	 * @param[in]	index			The index of the item to be deleted
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception E_INVALID_ARG   The specified input parameter is invalid. @n
     *								The specified @c index is less than @c 0 or greater than or equal to the item count.
	 * @exception	E_SYSTEM		A system error has occurred.
	 * @remarks   The removed list item is deleted from the memory.
	 */
	result RemoveItemAt(int index);

	/**
	 * Removes all the items from the %CustomList control.
	 *
	 * @since			1.0
	 * @return		An error code
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception	E_SYSTEM		A system error has occurred.
	 * @remarks   The removed list items are deleted from the memory.
	 */
	result RemoveAllItems(void);

	/**
	 * Gets the item at the specified index in the %CustomList control.
	 *
	 * @since			1.0
 	 * @return		A custom list item, @n
	 *            else @c null if the specified index is out of range
	 * @param[in] index       The index of the item to get
	 */
	const CustomListItem* GetItemAt(int index) const;

	/**
	 * Gets the number of items in the %CustomList control.
	 *
	 * @since		1.0
	 * @return	The number of items in %CustomList, @n
	 *          else @c -1 if an error occurs
	 */
	int GetItemCount(void) const;
  
	/**
	 * Enables or disables the status of the item at the specified @c index in the %CustomList control.
	 *
	 * @since			1.0
	 * @return		An error code
	 * @param[in] index		The index of the item whose status is to be set
	 * @param[in]	enable			Set to @c true to enable, @n
     *								else @c false
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception	E_SYSTEM		A system error has occurred.
	 */
	result SetItemEnabled(int index, bool enable);

	/**
	 * Checks whether the specified index in the %CustomList control is enabled.
	 *
	 * @since			1.0
	 * @return 		@c true if the item is enabled, @n
	 *				else @c false
	 * @param[in]	index	The index of the item to be checked
	 */
	bool IsItemEnabled(int index) const;

  /**
	 * Sets the check status of the item at the specified index in the %CustomList control.
	 *
	 * @since			1.0
	 * @return		An error code
	 * @param[in]	index		The index of the item to be set
	 * @param[in] check		The check status
	 * @exception	E_SUCCESS	The method is successful.
	 * @exception	E_SYSTEM	A system error has occurred.
	 * @remarks		This method can only be used when the style of the list allows selection.
	 */
	result SetItemChecked(int index, bool check);

	/**
	 * Checks whether the item at the specified index is checked in the %CustomList control.
	 *
	 * @since			1.0
	 * @return		@c true if the item is checked, @n
	 *				else @c false
	 * @param[in] index		The index of the item to check
	 * @remarks	This method can only be used when the style of the list allows selection.
	 */
	bool IsItemChecked(int index) const;

	/**
	 * Sets the check status for all items of the %CustomList control.
	 *
	 * @since					1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 1.2. @n
	 *					For more information, see @ref CompCustomListSetAllItemsChecked "here".
	 * @return		An error code
	 * @param[in]   check       The check status
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception   E_SYSTEM		A system error has occurred.
	 *
	 * @remarks	This method can only be used when the style of the list allows multiple selections.
	 */
	result SetAllItemsChecked(bool check);

	/**
	 * @page   CompCustomListSetAllItemsChecked	Compatibility for SetAllItemsChecked()
	 * @section CompCustomListSetAllItemsCheckedIssues Issues
	 * Implementation of this method in bada API versions prior to 1.2 has the following issue: @n
	 * -#	When the specified item is disabled, the checked status of the item is not changed.
	 *
	 * @section CompCustomListSetAllItemsCheckedResolutions Resolutions 
	 * The issue mentioned above is resolved in bada API version 1.2, and it is recommended to use bada API version 1.2 or above. @n	 
	 */

	/**
	 * Removes the checked items of the %CustomList control.
	 *
	 * @since			1.0
	 * @return		An error code
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception	E_SYSTEM		A system error has occurred.
	 *
	 * @remarks	This method can only be used when the style of the list allows multiple selections.
	 * @remarks   The removed list items are deleted from the memory.
	 */
	result	RemoveAllCheckedItems(void);

	/**
	 * Gets the first item of all the checked items in the %CustomList control.
	 *
	 * @since		1.0
	 * @return  The index of the first checked item, @n
	 *          else @c -1 if no item is checked or an error occurs
	 */
	int	GetFirstCheckedItemIndex(void) const;

  /**
	 * Gets the last item of all the checked items in the %CustomList control.
   *
   * @since		1.0
	 * @return  The index of the last checked item, @n
	 *          else @c -1 if no item is checked or an error occurs
   */
	int GetLastCheckedItemIndex(void) const;

  /**
	 * Gets the next checked item from the specified index in the %CustomList control.
   *
   * @since		1.0
	 * @return  The index of the next checked item @n
	 *          	else @c -1 if no more item after the specified index is checked, @n
	 *          	or the specified @c index is less than @c 0 or greater than the item count.
     * @param[in]	index		The index of the %CustomList control item
   */
	int GetNextCheckedItemIndexAfter(int index) const;

	/**
	 * Gets the index of the item at the specified position.
	 *
	 * @since			1.0
	 * @return		The index of the item, @n
	 *				else @c -1 if the specified position is not inside any of the items
	 * @param[in] x The x position of the point
	 * @param[in] y The y position of the point
	 */
	int GetItemIndexFromPosition(int x, int y) const;

	/**
	 * Gets the index of the item at the specified position.
	 *
	 * @since				1.0
	 * @return      The index of the item, @n
	 *				else @c -1 if the specified position is not inside any of the items
	 * @param[in]   position    The position of the point
	 */
	int GetItemIndexFromPosition(const Osp::Graphics::Point& position) const;

	/**
	 * Gets the index of the first item from the visible items in the %CustomList control.
   *
   * @since		1.0
	 * @return  The index of the first item, @n
	 *          else @c -1 if no item is visible
   */
	int	GetTopDrawnItemIndex(void) const;

  /**
   * Gets the index of the last item from the visible items in the %CustomList control.
   *
   * @since		1.0
   * @return  	The index of the last item, @n
	 *          else @c -1 if no item is visible
   */
	int	GetBottomDrawnItemIndex(void) const;

	/**
	 * Sets the background color of the %CustomList control.
	 *
	 * @since 		1.1
	 * @param[in]   color    The background color
	 */
	void SetBackgroundColor(const Osp::Graphics::Color& color);

  /**
	* Sets the text to be displayed when there is no item in the %CustomList control.
   *
   * @since			1.0
	* @param[in]	text	The text message to be displayed
   */
	void SetTextOfEmptyList(const Osp::Base::String& text);

	/**
	 * Sets the color of the text to be displayed when there is no item in the %CustomList control.
	 *
	 * @since     1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
	 *					For more information, see @ref CompCustomListSetTextColorOfEmptyList "here".
	 *
	 * @param[in]	color	The color of the text to be displayed
	 */
	void SetTextColorOfEmptyList(const Osp::Graphics::Color &color);

    /**
     * @page       CompCustomListSetTextColorOfEmptyList Compatibility for SetTextColorOfEmptyList()
     *
     * @section    CompCustomListSetTextColorOfEmptyListIssues Issues
     * Implementation of this method in bada API versions prior to 2.0 has the following issue: @n
     * -# The method ignores the alpha value of the specified color.
     *
     * @section    CompCustomListSetTextColorOfEmptyListResolutions Resolutions
     * The issue mentioned above is resolved in bada API version 2.0, and it is recommended to use bada API version 2.0 or above. @n
     */


	/**
	 * Gets the color of the text to display when there is no item in the CustomList control.
	 *
	 * @since    1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
	 *					For more information, see @ref CompCustomListGetTextColorOfEmptyList "here".
	 *
	 * @return	The color of the text to be displayed
	 */
	Osp::Graphics::Color GetTextColorOfEmptyList(void) const;

    /**
     * @page       CompCustomListGetTextColorOfEmptyList Compatibility for GetTextColorOfEmptyList()
     *
     * @section    CompCustomListGetTextColorOfEmptyListIssues Issues
     * Implementation of this method in bada API versions prior to 2.0 has the following issue: @n
     * -#   The method returns a 16-bit color which is converted from the color specified by SetTextColorOfEmptyList(), omitting the alpha value.
     *
     * @section    CompCustomListGetTextColorOfEmptyListResolutions Resolutions
     * The issue mentioned above is resolved in bada API version 2.0 as follows: @n
     * -# The method returns a 32-bit color.
     */


	/**
	 * Gets the index of the item.
	 *
	 * @since			1.0
	 * @return    The index of the item, @n
	 *            else @c -1 if no item has the specified item ID
	 * @param[in]	itemId		The item ID of the %CustomList control item
	 * @remarks   One or more indexes can have the same item ID, @n
     *				and this method returns the first item from such items.
	 */
	int GetItemIndexFromItemId(int itemId) const;

	/**
	 * Gets the item ID of the item at the specified index.
	 *
	 * @since			1.0
	 * @return		The item ID of the item, @n
	 *				else @c -1 if the specified @c index is less than @c 0 or greater than the item count
	 * @param[in]	index	The index of the %CustomList control item
	 */
	int GetItemIdAt(int index) const;

	/**
	 * Scrolls to the bottom of the %CustomList control.
	 *
	 * @since		1.0
	 */
	void ScrollToBottom (void);

	/**
	 * Scrolls to the top of the %CustomList.
	 *
	 * @since		1.0
	 */
	void ScrollToTop (void);

	/**
	 * Scrolls to the item at the specified index. @n
	 * The specified item is drawn at the top of the %CustomList control.
	 *
	 * @since		1.0
	 * @return		An error code
	 * @param[in]	index			The index of the %CustomList control item
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception	E_SYSTEM		A system error has occurred.
	 * @exception 	E_INVALID_ARG   The specified input parameter is invalid. @n
     *								The specified @c index is less than @c 0 or greater than the item count.
	 */
	result ScrollToTop (int index);

	/**
	 * Draws and shows the item at the specified index in the %CustomList control.
	 *
	 * @since			1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
     *			For more information, see @ref CompCustomListRefreshItem "here".
     *
	 * @return    An error code
	 * @param[in]	index					The index of the %CustomList control item
	 * @exception	E_SUCCESS				The method is successful.
	 * @exception	E_SYSTEM        		A system error has occurred.
     * @exception E_INVALID_OPERATION	The item has never been drawn before calling this method.
	 * @exception E_INVALID_ARG   		The specified input parameter is invalid. @n
     *										The specified @c index is less than @c 0 or greater than the item count.
	 */
	result RefreshItem(int index);

    /**
     * @page   CompCustomListRefreshItem	Compatibility for RefreshItem()
     * @section CompCustomListRefreshItemIssues Issues
     * Implementation of this method in bada API versions prior to 2.0 has the following issue: @n
     * -# If the specified item is not drawn at least once, calling this method updates the item in a wrong way and returns E_SUCCESS.
     *
     * @section CompCustomListRefreshItemResolutions Resolutions
     * The issue mentioned above is resolved in bada API version 2.0, and it is recommended to use bada API version 2.0 or above. @n
     * -# If the specified item has never been drawn before calling this method, it does not update the item and returns E_INVALID_OPERATION.
     */


	/**	 
	 * Sets the position and size of the control. @n
	 * Its position is set to (x, y), its width is set to @c width, and its height to @c height.
	 *
	 * @since			1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
	 *					For more information, see @ref CompControlBoundsSetter20 "here".
	 *
	 * @return		An error code
	 * @param[in]	x				    The x coordinate
	 * @param[in]	y				    The y coordinate
	 * @param[in]	width			    The width
	 * @param[in]	height			    The height
	 * @exception	E_SUCCESS					The method is successful.
	 * @exception   E_INVALID_OPERATION     	The control has not been constructed as yet.
	 * @exception	E_INVALID_STATE				This instance is in an invalid state.
	 * @exception	E_UNSUPPORTED_OPERATION		The method is not supported because this control is neither movable nor resizable.
	 * @exception	E_INVALID_ARG				A specified input parameter is invalid.@n
	 *											Either @c dim.width or @c dim.height is out of the range as defined by the minimum and maximum size.
	 * @exception	E_SYSTEM					A system error has occurred.
	 * @remarks		Do not override this method.
	 * @see   IsMovable()
	 * @see   IsResizable()
	 * @see   GetMinimumSize()
	 * @see   GetMaximumSize()
	 * @see   SetPosition()
	 * @see   SetSize()
	 */
	result SetBounds(int x, int y, int width, int height);

	/**
	 * Sets the position and size of the control.
	 *
	 * @since			1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
	 *					For more information, see @ref CompControlBoundsSetter20 "here".
	 *
	 * @return		An error code
	 * @param[in]	rect			    		The bounds of the control
	 * @exception	E_SUCCESS					The method is successful.
	 * @exception   E_INVALID_OPERATION     	The control has not been constructed as yet.
	 * @exception	E_INVALID_STATE				This instance is in an invalid state.
	 * @exception	E_UNSUPPORTED_OPERATION		The method is not supported because this control is neither movable nor resizable.
	 * @exception	E_INVALID_ARG				The specified input parameter is invalid.@n
	 *											Either @c dim.width or @c dim.height is out of the range as defined by the minimum and maximum size.
	 * @exception	E_SYSTEM					A system error has occurred.
	 * @remarks		Do not override this method.
	 * @see   IsMovable()
	 * @see   IsResizable()
	 * @see   GetMinimumSize()
	 * @see   GetMaximumSize()
	 * @see   SetPosition()
	 * @see   SetSize()
	 */
	result SetBounds(const Osp::Graphics::Rectangle& rect);

	/**
	 * Sets the size of the control.
	 *
	 * @since			1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
	 *					For more information, see @ref CompControlBoundsSetter20 "here".
	 *
	 * @return		An error code
	 * @param[in]	size			         The new size of the control
	 * @exception	E_SUCCESS					The method is successful.
	 * @exception	E_INVALID_STATE			 This instance is in an invalid state.
	 * @exception	E_UNSUPPORTED_OPERATION  The method is not supported because this control is not resizable.
	 * @exception	E_INVALID_ARG            The specified input parameter is invalid.@n
	 *											Either @c dim.width or @c dim.height is out of the range as defined by the minimum and maximum size.
	 * @exception	E_SYSTEM					A system error has occurred.
	 * @remarks		Do not override this method.
	 * @see   IsResizable()
	 * @see   GetMinimumSize()
	 * @see   GetMaximumSize()
	 */
	virtual result SetSize (const Osp::Graphics::Dimension &size);

	/**	 
	 * Sets the size of the control.
	 *
	 * @since			1.0
	 * @compatibility	This method has compatibility issues with bada API versions @b prior @b to @b 2.0. @n
	 *					For more information, see @ref CompControlBoundsSetter20 "here".
	 *
	 * @return		An error code
	 * @param[in]	width			         The width of the control
	 * @param[in]	height			         The height of the control
	 * @exception	E_SUCCESS		         	The method is successful.
	 * @exception	E_INVALID_STATE			 This instance is in an invalid state.
	 * @exception	E_UNSUPPORTED_OPERATION  The method is not supported because this control is not resizable.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid.@n
	 *									     	Either @c dim.width or @c dim.height is out of the range as defined by the minimum and maximum size.
	 * @exception	E_SYSTEM                 	A system error has occurred.
	 * @remarks		Do not override this method.
	 * @see   IsResizable()
	 * @see   GetMinimumSize()
	 * @see   GetMaximumSize()
	 */
	virtual result SetSize (int width, int height);

protected:
	/**
     * @internal    
     * This method is for internal use only. The bada platform team is not
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this method.
	 *
	 * Frees the resources allocated by this control and destroys its native window if it is present.
	 *
	 * @since		1.0
	 * @return		An error code
	 * @exception	E_SUCCESS   The method is successful.
	 * @exception	E_SYSTEM    A system error occurred.
	 */
	result Dispose(void);

private:
	/**
     * @internal    
     * This method is for internal use only. The bada platform team is not
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this method.
	 *
	 * Draws the control.
     * @since       1.0
     * @return		An error code
	 * @exception	E_SUCCESS		The method is successful.
	 * @exception	E_SYSTEM		A system error has occurred.
	 */
	virtual result __Draw(void);

	/**
     * @internal    
     * This value is for internal use only. The bada platform team is not 
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this value.
	 *
	 * The ItemEvent
     * @since         1.0
     */	 
	Osp::Base::Runtime::IEvent* __pCustomItemEvent;

	/**
     * @internal    
     * This value is for internal use only. The bada platform team is not 
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this value.
	 *
	 * The custom item event adapter.
     * @since         1.0
     */	 
	void* __pCustomItemEventAdaptor;

	/**
     * @internal    
     * This value is for internal use only. The bada platform team is not 
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this value.
	 *
	 * The item store.
     * @since         1.0
     */	 
	Osp::Base::Collection::ArrayList __items;

	/**
     * @internal    
     * This value is for internal use only. The bada platform team is not 
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this value.
	 *
	 * The background bitmap
     * @since         1.0
     */	 
	Osp::Graphics::Bitmap*	__pListBgBitmap;

	friend class CustomListEx;
	/**
     * @internal    
     * This value is for internal use only. The bada platform team is not 
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this value.
	 *
	 * The internal data structure.
     * @since         1.0
     */	
     class CustomListEx* __pCustomListEx;

protected:
	friend class CustomListImpl;
	/**
     * @internal    
     * This method is for internal use only. The bada platform team is not 
	 * responsible for any behavioral correctness, consistency, and 
	 * security-related issues that might arise after using this method.
	 *
     * Gets the implementation instance of this control
     *
     * @since         2.0
     */
	class CustomListImpl* GetImpl(void) const;
};
}; }; }; 
#endif
