/* $Change: 431318 $ */
//
// Copyright (c) 2011 Samsung Electronics Co., Ltd.
// All rights reserved.

// This software contains confidential and proprietary information
// of Samsung Electronics Co., Ltd.
// The user of this software agrees not to disclose, disseminate or copy such
// Confidential Information and shall use the software only in accordance with
// the terms of the license agreement the user entered into with Samsung.
//
/**
 * @file		FTestTestFixture.h
 * @brief		This is the header file for the %TestFixture class.
 *
 * This header file contains the declarations of the %TestFixture class.
 */
#ifndef _FTEST_TEST_FIXTURE_H_
#define _FTEST_TEST_FIXTURE_H_

#include <FBase.h> 

namespace Osp { namespace Test {

/**
 * @class		TestFixture
 * @brief		This is class implements a test fixture in unit testing. 
 * @since		1.1
 *
 * The %TestFixture class implements a test fixture in unit testing.
 * It defines SetUp(), TearDown(), SetUpBeforeTestSuite(), and TearDownAfterTestSuite() methods to use as pre and post condition 
 * that need to repeat during the testing. When you create a test case with %TestFixture, your test case has to use the class inherited from this class.
 *
 * TIP: Writing test fixture code by hand can be difficult. You can also create a text fixture using the Test Case Wizard in the bada IDE. 
 *
 * For more information on the class features, see <a href="../com.osp.documentation.help/html/dev_env/testing_using_test_fixture.htm">Creating and Running a Test Case with a Test Fixture</a>.
 * 
 * The following example demonstrates how to use the %TestFixture class.
 * Note that the SetUpBeforeTestSuite() and TearDownAfterTestSuite() methods can only be executed in the TestSuite and TestRunner classes.
 *
 * @code
 * class TestBankAccount: public Osp::Test::TestFixture{
 *	// Note - This block is auto-generated by bada Test Case Wizard.
 *	//        Following MACROs make a static function Osp::Test::TestSuite* suite()
 *	//        to generate a TestSuite to help your test.
 *	// TODO:
 *	// register your TestCases between TESTSUITE_BEGIN() and TESTSUITE_END().
 *	TESTSUITE_BEGIN(TestBankAccount)
 *	SIMPLE_TEST(TestDeposit)
 *	SIMPLE_TEST(TestGetBalance)
 *	TESTSUITE_END()
 *
 *	public:
 *		 // Note - The following functions serve to initialize and clean up your test fixture.
 *		void SetUpBeforeTestSuite() {}
 *		void TearDownAfterTestSuite() {}
 *		void SetUp() {}
 *		void TearDown() {}
 *
 *		// TODO:
 *		// Define your method for TestCase.
 *		void TestDeposit() {TestFailMessage("Not yet implemented");}
 *		void TestGetBalance() {TestFailMessage("Not yet implemented");}
 *};
 *
 * @endcode
 *
 * 
 */
class TestFixture : public Osp::Base::Object
{
protected:
	/**
	 * This is the default constructor for this class.
	 *
	 * @since		1.1
	 */
	TestFixture(void);

public:
	/**
	 * This is the destructor for this class.
	 *
	 * @since		1.1
	 */
	virtual ~TestFixture(void);

	/**
	 * Returns the class name of the class inherited from %TestFixture.
	 *
	 * @since			1.1
	 * @return		The name of the class inherited from %TestFixture
	 */
	virtual Osp::Base::String GetClassName(void) const;

protected:
	/**
	 * Called before test cases when current %TestFixture is tested. @n
	 * This method is run once before running any of the test cases that are in TestSuite.
	 *
	 * @since		1.1
	 */
	virtual void SetUpBeforeTestSuite(void);

	/**
	 * Called after test cases when current %TestFixture is tested. @n
	 * This method is run once after running all of the test cases that are in TestSuite.
	 *
	 * @since		1.1
	 */
	virtual void TearDownAfterTestSuite(void);

	/**
	 * Called before running a test case.
	 *
	 * @since		1.1
	 */
	virtual void SetUp(void);

	/**
	 * Called after running a test case.
	 *
	 * @since		1.1
	 */
	virtual void TearDown(void);

private:
	friend class TestSuite;
	friend class TestCase;
	friend class __TestContainer;
};

}}
#endif /* _FTEST_TEST_FIXTURE_H_ */
